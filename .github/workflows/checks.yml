name: checks

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      project-name:
        required: true
        type: string

jobs:
  setup:
    uses: ./.github/workflows/setup.yml
    with:
      python-version: ${{ inputs.python-version }}

  linters:
    env:
      PACKAGE_NAME: {{ inputs.project-name }}
      PYTHON_V: '${{ inputs.python-version }}'
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: $PYTHON_V

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-$PYTHON_V-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run linters and checks
        run: |
          echo '********************************************'
          echo Checks for $PACKAGE_NAME on $PYTHON_V
          echo '********************************************'
          source .venv/bin/activate
          isort $PACKAGE_NAME
          black $PACKAGE_NAME
          flake8 $PACKAGE_NAME --verbose
          mypy $PACKAGE_NAME --install-types --non-interactive --config-file pyproject.toml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save linter reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linter-reports
          path: report.xml

  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run shuffled tests
        run: |
          source .venv/bin/activate
          pytest --random-order --junitxml=tests.xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save test reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: tests.xml

  coverage:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run coverage
        run: |
          source .venv/bin/activate
          coverage run -m pytest --junitxml=report.xml
          coverage report --fail-under=92
          coverage xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save coverage reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: coverage.xml
