name: checks

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      package-name:
        required: true
        type: string
      min-coverage:
        required: true
        type: number

jobs:
  setup:
    uses: ./.github/workflows/setup.yml
    with:
      python-version: ${{ inputs.python-version }}

  linters:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run linters and checks
        run: |
          source .venv/bin/activate
          isort ${{ inputs.package-name }}
          black ${{ inputs.package-name }}
          flake8 ${{ inputs.package-name }}
          mypy ${{ inputs.package-name }} --install-types --non-interactive --config-file pyproject.toml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save linter reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linter-reports
          path: report.xml

  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run shuffled tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            source .venv/bin/activate
            pytest --random-order --junitxml=tests.xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save test reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: tests.xml

  coverage:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load virtual environment
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Run coverage
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            source .venv/bin/activate
            coverage run -m pytest
            coverage report --fail-under=${{inputs.min_coverage}}
            coverage xml
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Save coverage reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: coverage.xml

      - name: Upload coverage reports to Codecov
#        if: ${{ github.ref == 'refs/heads/main' && github.repository == 'openweathermap/deker'}}
        if: ${{ github.repository == 'openweathermap/deker'}}
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
